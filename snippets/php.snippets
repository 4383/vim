# Namespace
snippet php_new
	<?php
	/**
	 * fichier `expand('%:t')`
	 *
	 * Historique :
	 * <ul>
	 * <li>`system("date +%d/%m/%Y")` : `g:snips_author`
	 *                  Création
	 * </li>
	 * </ul>
	 *
	 * @author `g:snips_author`
	 * @version 1.0
	 * @since 1.0
	 * @copyright `g:snips_author`
	 * @package ${1:`'Classes_'`} {
	 * @subpackage ${2:`'Sub'`}
	 */
	
	/**
	 * Includes
	 */
	require_once('includes/classes/bd.php');
	
	/**
	 * Classe ${3:`'NomDeClasse'`}
	 *
	 * @author `g:snips_author`
	 * @version 1.0
	 * @since 1.0
	 * @copyright `g:snips_author`
	 *
	 * @package $1
	 * @subpackage $2
	 */
	class $3 extends ${4:`'Objet'`}
	{
	  /**
	   * Constructeur
	   *
	   * @return void
	   */
	  public function __construct()
	  {
	    parent::__construct();
	  }
	${5:`'/* Code */'`}
	}
	?>
	}
# Fonction sans argument :
snippet fn
	  
	  /**
	   * ${1:`'Description de la fonction'`}
	   *
	   * @return ${2:`'int'`} ${3:`'Description retour'`}
	   */
	  ${4:`'public'`} function ${5:`'fn'`}()
	  {
	    ${6:`'/* Code */'`}
	  }
	  
# Fonction avec 1 argument :
snippet fn1
	  
	  /**
	   * ${1:`'Description de la fonction'`}
	   *
	   * @param ${2:`'int'`} $${3:`'Param1'`}
	   *   ${4:`'Description'`}
	   *
	   * @return ${5:`'int'`} ${6:`'Description retour'`}
	   */
	  ${7:`'public'`} function ${8:`'fn'`}($$3)
	  {
	    ${9:`'/* Code */'`}
	  }
	  
# Fonction avec 2 arguments = 'fn2' :
snippet fn2
	  
	  /**
	   * ${1:`'Description de la fonction'`}
	   *
	   * @param ${2:`'int'`} $${3:`'Param1'`}
	   *   ${4:`'Description'`}
	   * @param ${5:`'int'`} $${6:`'Param2'`}
	   *   ${7:`'Description'`}
	   *
	   * @return ${8:`'int'`} ${9:`'Description retour'`}
	   */
	  ${10:`'public'`} function ${11:`'fn'`}($$3,$$6)
	  {
	    ${12:`'/* Code */'`}
	  }
	  
# Lever une exception : 'throw new' :
snippet tn
	throw new Exception('${1:`'Texte exception'`}');
# Appartenant à une classe (argument ou méthode)
snippet $t
	$this->${1}
# If avec lever une exception : 'if ... throw new' :
snippet iftn
	if (${1:`'Condition'`}) {
	  throw new Exception('${2:`'Texte exception'`}');
	}
snippet gset
	  /**
	   * @var ${1:`'int'`} ${2:`'Description'`}
	   */
	  ${3:`'private'`} $${4:`'NomVariable'`};
	  
	  /**
	   * Lit $2
	   * @return $1 $2
	   */
	  public function get$4()
	  {
	    if (!isset($this->$4)) {
	      throw new Exception('$4 : pas initialise');
	    }
	    return $this->$4;
	  }
	  /**
	   * Valoriser $2
	   * @param $1 $$4 $2
	   * @return void
	   */
	  public function set$4($$4)
	  {
	    if (!is_$1($$4)) {
	      throw new Exception('$4 : type $1 attendu');
	    }
	    $this->$4=$$4;
	  }
snippet php
	<?php
	${1}
	?>
snippet ec
	echo "${1:string}"${2};
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once('${1:file}');${2}
# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ GET['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 **/
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	**/${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 **/${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 **/
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 **/
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 **/${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 **/
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 **/${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 **/
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 **/
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 **/
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet class
	/**
	 * ${1}
	 **/
	class ${2:ClassName}
	{
		${3}
		function ${4:__construct}(${5:argument})
		{
			${6:// code...}
		}
	}
# define(...)
snippet def
	define('${1}'${2});${3}
# defined(...)
snippet def?
	${1}defined('${2}')${3}
snippet wh
	while (${1:/* condition */}) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while (${1:/* condition */});
snippet if
	if (${1:/* condition */}) {
		${2:// code...}
	}
snippet ife
	if (${1:/* condition */}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet foreach
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3})
	{
		${4:// code...}
	}
# $... = array (...)
snippet array
	$${1:arrayName} = array('${2}' => ${3});${4}
